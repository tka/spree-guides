h2. Contributing to Spree

Spree is an open source project.  Anyone can use the code, but more importantly, anyone can contribute.  This is a group effort and we value your input.  Please consider making a contribution to help improve the Spree project.  This guide covers:

* How to file a ticket when you discover a bug
* How to contribute fixes and improvements to the core
* Information on how to improve the documentation

endprologue.

h3. Who can Contribute?

Spree is an open source project and as such contributions are always welcome.  Our community is one which encourages involvement from all developers regardless of their ability level.  We ask that you be patient with the other members of the community and maintain a respectful attitude towards other people's work.  Open source is a great way to learn a new technology so don't be afraid to jump right in, even if you are new to Ruby/Rails.

h3. Before you Contribute

Open source projects tend to be a collaborative effort.  Since many people are relying upon Spree for their real world applications, changes to the code can have major implications.  Before you write a bug fix or code a new feature, you should find out if anybody is interested in your proposed change.  You may find that the thing you're trying to "fix" is actually desired behavior.  You might also discover that someone else is working on it.  Either way you can save yourself valuable time by announcing your intentions before starting work.

h4. Mailing List

One of the best places for communication is the "spree-user mailing list":http://groups.google.com/group/spree-user.  You can search this list of previous discussions and get a sense for whether you're trying to address something new.

h4. IRC

There is a #spree chat room on IRC.  Sometimes the core contributors hang out there and you can get some feedback on your idea.

WARNING: The #spree chat room is not monitored as carefully as the mailing list.  Sometimes you'll get lucky and someone will answer your question but we can't provide real time responses to everyone with a question/problem/idea.  The mailing list is a much better way to communicate (and it gives everyone the chance to provide a thoughtful response.)

h4. Notification via Ticket

You can also search existing bug reports/issues and file a new one if you do not find an issue relevant to your proposed change.  See "Filing an Issue":#filing-an-issue for more details.

NOTE: The important thing is that you communicate your intention in advance of doing a lot of work.  Simple bug fixes and non-controversial changes do not require this approach but you can save some time by suggesting an improvement and having it rejected before you write a bunch of the code.

h3. Filing an Issue

If you would like to file a bug report, please create an issue in our "Github Issues Tracker":https://github.com/spree/spree/issues.  You should do a basic search of the issues database before creating a new issue to ensure that you are not creating a duplicate issue.

INFO: Please do not assign labels or create new labels to your issue.  We will assign the appropriate labels to ensure your ticket is handled in the appropriate manner.

h4. When to File an Issue

You should file an issue if you have found (or suspect) a bug in the "core" functionality of Spree.  If you have found a bug in one of the extensions, please file an issue with the appropriate project in Github.  If you're not sure if the behavior you're experiencing is intentional just ask on the mailing list and someone will encourage you to file a ticket if your issue sounds like a bug (as opposed to a feature.)

h4. Providing a Patch

If you are filing and issue and supplying a patch at the same time, please file a "Pull Request":#creating-a-pull-request instead.  The pull request will also create an issue at the same time but its superior to just creating an issue because the code and issue can be linked.

If the ticket already exists, however, and you want to supply a patch after the fact, you can simply reference the issue number in your commit message. For example, if your commit fixed issue #123 you could use the following commit message:

<shell>
Fixed a problem with Facebook authentication.

[Fixes #123]
</shell>

Github will automatically detect this commit message when you push it and link the issue.  Please see the detailed "Github Issues":http://github.com/blog/831-issues-2-0-the-next-generation blog post for more details.

h4. Feature Requests

We're interested in hearing your ideas for new features but creating feature requests in the Issue Tracker is not the proper way to ask for a feature.  A feature request is any idea you have to improve the software experience that is not strictly related to a bug or error of omission.

INFO: Feature requests that are accompanied by source code are always welcome.  In this case you should read the next section on "Creating a Pull Request":creating-a-pull-request.

WARNING: Feature requests without accompanying code will be closed.  We simply cannot respond efficiently to feature requests through our Issue Tracker.  If you want to suggest a feature, please use the "mailing list"::http://groups.google.com/group/spree-user or the "user voice":http://spree.uservoice.com/ forum.

h4. How We Prioritize Issues

Spree is a very large project with lots of activity.  We try our best to respond to all of the questions and issues our users have.  We use the following criteria to prioritize issues:

* Does this bug effect the latest stable release?
* Is there a patch associated with the issue?
* Is ther a test included in the patch?
* Has someone else verified the bug?
* Are there details on how to reproduce the problem?

We give highest priority to issues where the answer is "yes" to all of these questions.  Next highest priority is for issues that answer "yes" to most of these questions, particularly the first few criteria.

NOTE: You need to include a brief description of the problem and simple steps needed to reproduce it.  If you fail to supply this minimum level of information your issue will likely be ignored.

h3. Creating a Pull Request

h4. Topic Branches

h4. Rebasing your Branch

h4. Including a Test

h4. Helpful Commit Messages

h3. Contributing to the Guides

h3. Extensions

Creating your own extension or making improvements to existing extensions is strongly encouraged.  Please see the "Extension Guide":extensions.html for more details on how to contribute through extensions.

h3. Contributing to the Core

The core is the basic foundation of the Spree project.  It is maintained in Github under the "spree/spree":http://github.com/spree/spree/tree/master project.  There is a "core team":http://spreecommerce.com/core_team of developers who are responsible for maintaining the quality of the source code.  Your changes will ultimately need to be merged into the official project by a core member.  Thanks to "Github":http://github.com, however, you do not have to wait for a core member to get started with your fix.

h4. One Time Steps

Please perform the following one time steps for your fork in Github.

h5. Create a Remote Reference in Git to Railsdog

You will need to create a fork of the Spree project in Github.  This is a pretty self explanatory process.  After you have done this and cloned your repository you will need to add a reference to the official repository (railsdog).

<shell>
git remote add railsdog git://github.com/spree/spree.git
</shell>

WARNING: Its important that you add this reference.  Its a one time step that will allow you to easily create branches based on the most recent version of the official code.

h4. For Each Contribution

h5. Create a Ticket in Lighthouse

The Spree development team is using "Light House":http://railsdog.lighthouseapp.com/projects/31096-spree/overview for tracking all issue and feature requests. Use it to browse the existing tickets or to submit a new issue.  All changes to the core should flow through this system. Please file an issue before you commit your code so that you can then reference the issue number in your commit.  We get a high volume of contributions, so taking a second to create the LH issue helps us to keep track of your bug reports and fixes so that they do not get lost in the shuffle.

WARNING: Do not submit pull requests in Github.  Do not send bug reports to the spree-user list.  In both cases you will be politely asked to file an issue in Lighthouse.  We need to deal with these matters in the most efficient way possible - we're not trying to be difficult.

h5. Create a Clean Branch for Each Issue

Git branches are "cheap."  Creating branches in Git is incredibly easy and its an ideal way to isolate a specific set of changes.  You may be fixing several things at one time but by keeping your changes isolated it will help us to find and apply only the changes we're interested in.  You should create a clean branch based on the latest +railsdog/master+ when doing this.  It is important you follow these steps exactly, it will prevent you from accidentally including unrelated changes from your local copy into the branch.

For example, if we were submitting a patch to issue #525 which provided thai localization we would create the branch as follows:

<shell>
git fetch railsdog
git checkout -b 525-add-thai-localization --track railsdog/master
</shell>

The +fetch+ command will grab all of the latest commits on railsdog.  Don't worry, it doesn't merge them into your current branch or anything.  This is just making sure that you have a complete copy of the railsdog source.  The commits will be stored behind the scenes, your local code will remain as it was.

The +track+ part of the command will tell git that this branch should track with the remote version of railsdog master.  This is another way of saying that the branch should be based on a clean copy of the latest source code.

h5. Add the Issue Number to Your Commits

When you're ready to commit be sure to add the issue number in your commit message.  It is suggested that you just use +git commit+ without the +-m+ option.  This will allow you to view the commit message in your editor and add some line spacing for readability.  Here's an example of a commit message.

<shell>
Provided a Thai localization.

[#525]
</shell>

Please be sure to include the issue number inside of brackets.  This will make sure that Lighthouse will be notified of the changeset when you push to Github.  It will also automatically change the ticket state to "patched" which will help us to prioritize issues where users have supplied a fix.  Note also the blank line between the comment and the issue number.  This helps with readability.

WARN. Lighthouse will not be notified of the fix automatically due to some technical problems with the hook.  Please continue to use this notation since the style will be compatible with the eventual new solution to this problem.

h5. Rebase if Necessary

If you've been working on your fix for more than a few hours there is a good chance that you will need to rebase.  Git's rebase command is one of those scary sounding things that really isn't all that bad "once you understand it":http://www.gitready.com/intermediate/2009/01/31/intro-to-rebase.html.

So you can check to see if there have been any chances to railsdog since you created your branch.

<shell>
  git fetch railsdog
</shell>

If nothing comes back, then +railsdog/master+ is unchanged and there's nothing to do.  If you see a bunch of commits coming down, however, then its time to rebase.  Run the following command from your "issue branch" which you should still be on.

<shell>
  git rebase railsdog/master
</shell>

If you're lucky the command will run without incident.  If there are conflicts, you can resolve them manually (better you then us) and continue the rebase operation (+git rebase --continue).

h5. Push to a Remote Branch in Github

Now all you have to do is push your changes to a remote branch in Git Hub.

<shell>
git push origin 525-add-thai-localization
</shell>

If you have set up the GitHub service hook as described earlier, the changes will automatically be reflected in the Lighthouse ticket once you push.

WARNING: In previous versions of this guide we encouraged you to create a "service hook" for your fork in Github.  Unfortunately we are expereincing technical problems processing these commit messages.  We're working on a new solution that will automatically detect your fixes in Github when using the proper notation in your commits.

h5. Merge to Your Local Master and Push

The final step is to make sure these changes are merged back into your own master branch.  This way they are available to you alongside your other changes that may or may not be slated to be merged into the core.

So continuing with our previous example you should then do:

<shell>
  git checkout master
  git merge 525-add-thai-localization
  git push origin master
</shell>

h5. Summary of Contribution Steps

# Create a ticket in Lighthouse
# Create a branch for each ticket
# Note the ticket # in your commit
# Rebase against the latest railsdog/master
# Push the commit to your remote branch
# Merge the commit to your master and push to Github

h3. Contributing to the Documentation

Improvements to the documentation is encouraged.  The primary source of documentation are the guides (_HINT: You are reading one now._)  The documentation is in its own GitHub project called "spree-guides":http://github.com/spree/spree-guides/tree/master.  To build the documentation normally simply clone and install.

<shell>
  $ git clone git://github.com/spree/spree-guides.git
  $ cd spree-guides
  $ bundle install
  $ rake guides
</shell>

INFO: You will also need to install the RedCloth gem (4.1.1 or greater) if you do not done so.

You do not need to fork the spree-guides project in order to contribute.  Just send an email to "spree-user":http://groups.google.com/group/spree-user (be sure to include your github username) and say that you would like to contribute.  We'll add you to the list so you can commit directly to the guides project.

INFO: If you're uncomfortable using Git, etc. you can report a mistake in the Spree guides using Github's built in "issue tracker":http://github.com/spree/spree-guides/issues.  Please do **not** report issues with the documentation in the Lighthouse ticket system which is reserved for reporting bugs in the code.

WARNING: Please be considerate when making changes to the spree-guides.  If you wish to make major changes to how the documentation is organized then you should use a GitHub fork and ask people to review your proposed changes instead.

<!-- hack comment so guides gem can end with INFO:, NOTE:, WARNING:, etc. -->
